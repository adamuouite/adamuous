{
	"version": 3,
	"file": "style.css",
	"sources": [
		"scss/style.scss",
		"scss/_breakpoints.scss",
		"scss/_lists.scss"
	],
	"sourcesContent": [
		"@import \"./breakpoints\";\r\n@import \"./lists\";\r\n\r\nbody {\r\n  margin: 0;\r\n}\r\nheader {\r\n  @include list(space-around);\r\n  width: 100%;\r\n  position: fixed;\r\n  align-items: stretch;\r\n  background-color: lightblue;\r\n  flex-direction: row;\r\n  .header-list {\r\n    @include list(center);\r\n    padding: 1em;\r\n  }\r\n  .ban {\r\n    background: #001427;\r\n    box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.25);\r\n    border-radius: 70px;\r\n  }\r\n  .left-nav {\r\n    position: relative;\r\n    left: 2.69%;\r\n    right: 77.15%;\r\n    top: 1.15%;\r\n    bottom: 49.23%;\r\n  }\r\n}\r\n",
		"// Breakpoint viewport sizes and media queries.\r\n//\r\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\r\n//\r\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)\r\n//\r\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\r\n\r\n// Name of the next breakpoint, or null for the last breakpoint.\r\n//\r\n//    >> breakpoint-next(sm)\r\n//    md\r\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\r\n//    md\r\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))\r\n//    md\r\n@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {\r\n    $n: index($breakpoint-names, $name);\r\n    @if not $n {\r\n      @error \"breakpoint `#{$name}` not found in `#{$breakpoints}`\";\r\n    }\r\n    @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\r\n  }\r\n  \r\n  // Minimum breakpoint width. Null for the smallest (first) breakpoint.\r\n  //\r\n  //    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\r\n  //    576px\r\n  @function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\r\n    $min: map-get($breakpoints, $name);\r\n    @return if($min != 0, $min, null);\r\n  }\r\n  \r\n  // Maximum breakpoint width.\r\n  // The maximum value is reduced by 0.02px to work around the limitations of\r\n  // `min-` and `max-` prefixes and viewports with fractional widths.\r\n  // See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\r\n  // Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\r\n  // See https://bugs.webkit.org/show_bug.cgi?id=178261\r\n  //\r\n  //    >> breakpoint-max(md, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\r\n  //    767.98px\r\n  @function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\r\n    $max: map-get($breakpoints, $name);\r\n    @return if($max and $max > 0, $max - .02, null);\r\n  }\r\n  \r\n  // Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.\r\n  // Useful for making responsive utilities.\r\n  //\r\n  //    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\r\n  //    \"\"  (Returns a blank string)\r\n  //    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\r\n  //    \"-sm\"\r\n  @function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\r\n    @return if(breakpoint-min($name, $breakpoints) == null, \"\", \"-#{$name}\");\r\n  }\r\n  \r\n  // Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\r\n  // Makes the @content apply to the given breakpoint and wider.\r\n  @mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\r\n    $min: breakpoint-min($name, $breakpoints);\r\n    @if $min {\r\n      @media (min-width: $min) {\r\n        @content;\r\n      }\r\n    } @else {\r\n      @content;\r\n    }\r\n  }\r\n  \r\n  // Media of at most the maximum breakpoint width. No query for the largest breakpoint.\r\n  // Makes the @content apply to the given breakpoint and narrower.\r\n  @mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\r\n    $max: breakpoint-max($name, $breakpoints);\r\n    @if $max {\r\n      @media (max-width: $max) {\r\n        @content;\r\n      }\r\n    } @else {\r\n      @content;\r\n    }\r\n  }\r\n  \r\n  // Media that spans multiple breakpoint widths.\r\n  // Makes the @content apply between the min and max breakpoints\r\n  @mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\r\n    $min: breakpoint-min($lower, $breakpoints);\r\n    $max: breakpoint-max($upper, $breakpoints);\r\n  \r\n    @if $min != null and $max != null {\r\n      @media (min-width: $min) and (max-width: $max) {\r\n        @content;\r\n      }\r\n    } @else if $max == null {\r\n      @include media-breakpoint-up($lower, $breakpoints) {\r\n        @content;\r\n      }\r\n    } @else if $min == null {\r\n      @include media-breakpoint-down($upper, $breakpoints) {\r\n        @content;\r\n      }\r\n    }\r\n  }\r\n  \r\n  // Media between the breakpoint's minimum and maximum widths.\r\n  // No minimum for the smallest breakpoint, and no maximum for the largest one.\r\n  // Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\r\n  @mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\r\n    $min:  breakpoint-min($name, $breakpoints);\r\n    $next: breakpoint-next($name, $breakpoints);\r\n    $max:  breakpoint-max($next);\r\n  \r\n    @if $min != null and $max != null {\r\n      @media (min-width: $min) and (max-width: $max) {\r\n        @content;\r\n      }\r\n    } @else if $max == null {\r\n      @include media-breakpoint-up($name, $breakpoints) {\r\n        @content;\r\n      }\r\n    } @else if $min == null {\r\n      @include media-breakpoint-down($next, $breakpoints) {\r\n        @content;\r\n      }\r\n    }\r\n  }\r\n  ",
		"// Lists\r\n\r\n// Unstyled keeps list items block level, just removes default browser padding and list-style\r\n@mixin list($justify) {\r\n  margin: 0;\r\n  padding: 1m;\r\n  display: flex;\r\n  justify-content: $justify;\r\n  list-style: none;\r\n}"
	],
	"names": [],
	"mappings": ";AAGA,AAAA,IAAI,CAAC;EACH,MAAM,EAAE,CAAC,GACV;;;AACD,AAAA,MAAM,CAAC;EEFL,MAAM,EAAE,CAAC;EACT,OAAO,EAAE,EAAE;EACX,OAAO,EAAE,IAAI;EACb,eAAe,EFAD,YAAY;EEC1B,UAAU,EAAE,IAAI;EFAhB,KAAK,EAAE,IAAI;EACX,QAAQ,EAAE,KAAK;EACf,WAAW,EAAE,OAAO;EACpB,gBAAgB,EAAE,SAAS;EAC3B,cAAc,EAAE,GAAG,GAiBpB;;EAvBD,AAOE,MAPI,CAOJ,YAAY,CAAC;IETb,MAAM,EAAE,CAAC;IACT,OAAO,EAAE,EAAE;IACX,OAAO,EAAE,IAAI;IACb,eAAe,EFOC,MAAM;IENtB,UAAU,EAAE,IAAI;IFOd,OAAO,EAAE,GAAG,GACb;;EAVH,AAWE,MAXI,CAWJ,IAAI,CAAC;IACH,UAAU,EAAE,OAAO;IACnB,UAAU,EAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,mBAAmB;IAC3C,aAAa,EAAE,IAAI,GACpB;;EAfH,AAgBE,MAhBI,CAgBJ,SAAS,CAAC;IACR,QAAQ,EAAE,QAAQ;IAClB,IAAI,EAAE,KAAK;IACX,KAAK,EAAE,MAAM;IACb,GAAG,EAAE,KAAK;IACV,MAAM,EAAE,MAAM,GACf"
}